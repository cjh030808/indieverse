---
description: 
globs: 
alwaysApply: false
---
# Indieverse Development Guidelines

## üöÄ CRITICAL: DEVELOPMENT RULES YOU MUST FOLLOW

### ‚úÖ MANDATORY REQUIREMENTS:
- **ALWAYS** use `'use client'` directive for ALL components
- **ALWAYS** use Promise for page.tsx params props
- **ALWAYS** use valid picsum.photos stock images for placeholders
- **ALWAYS** implement proper TypeScript types for all functions and components
- **ALWAYS** follow the established directory structure
- **ALWAYS** use the specified libraries for their intended purposes
- **ALWAYS** implement proper error handling and loading states
- **ALWAYS** ensure responsive design (mobile-first approach)

### ‚ùå STRICTLY FORBIDDEN:
- **NEVER** use server components without proper client/server separation
- **NEVER** ignore TypeScript errors or use 'any' types
- **NEVER** bypass authentication or authorization checks
- **NEVER** use deprecated or unsupported libraries
- **NEVER** create components without proper accessibility features
- **NEVER** ignore performance implications of your code

---

## 1. Technology Stack & Libraries

### 1.1. Core Libraries (MUST USE)

| Library | Purpose | Version |
|---------|---------|---------|
| `date-fns` | Date and time handling | ^4 |
| `ts-pattern` | Type-safe branching logic | ^5 |
| `@tanstack/react-query` | Server state management | ^5 |
| `zustand` | Lightweight global state | ^4 |
| `react-use` | Common React hooks | ^17 |
| `es-toolkit` | Utility functions | ^1 |
| `lucide-react` | Customizable icons | ^0.469.0 |
| `zod` | Schema validation | ^3 |
| `shadcn-ui` | Accessible UI components | Latest |
| `tailwindcss` | Utility-first CSS | ^3.4.1 |
| `supabase` | Backend-as-a-service | Latest |
| `react-hook-form` | Form validation | ^7 |

### 1.2. Library Usage Rules

**React Query (TanStack Query):**
```typescript
// ‚úÖ CORRECT: Use for server state
const { data, isLoading, error } = useQuery({
  queryKey: ['bands', bandId],
  queryFn: () => fetchBand(bandId)
});

// ‚ùå WRONG: Don't use for client state
const [isModalOpen, setIsModalOpen] = useState(false);
```

**Zustand:**
```typescript
// ‚úÖ CORRECT: Use for global client state
const useStore = create((set) => ({
  selectedBand: null,
  setSelectedBand: (band) => set({ selectedBand: band })
}));

// ‚ùå WRONG: Don't use for server data
const useBands = create((set) => ({
  bands: [],
  fetchBands: async () => {
    const data = await fetch('/api/bands');
    set({ bands: data });
  }
}));
```

---

## 2. Directory Structure (MANDATORY)

```
src/
‚îú‚îÄ‚îÄ app/                           # Next.js App Router
‚îÇ   ‚îú‚îÄ‚îÄ (auth)/                   # Authentication routes
‚îÇ   ‚îú‚îÄ‚îÄ (dashboard)/              # Protected routes
‚îÇ   ‚îú‚îÄ‚îÄ api/                      # API routes
‚îÇ   ‚îî‚îÄ‚îÄ globals.css               # Global styles
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ ui/                       # shadcn-ui components
‚îÇ   ‚îî‚îÄ‚îÄ shared/                   # Reusable components
‚îú‚îÄ‚îÄ features/                     # Feature-based organization
‚îÇ   ‚îú‚îÄ‚îÄ [featureName]/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/           # Feature-specific components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ constants/            # Feature constants
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/                # Feature-specific hooks
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/                  # Feature utilities
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ api.ts                # API functions
‚îú‚îÄ‚îÄ hooks/                        # Common hooks
‚îú‚îÄ‚îÄ lib/                          # Utility functions
‚îú‚îÄ‚îÄ types/                        # TypeScript definitions
‚îî‚îÄ‚îÄ constants/                    # Global constants
```

### 2.1. Feature Organization Rules

**‚úÖ CORRECT Feature Structure:**
```
src/features/bands/
‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îú‚îÄ‚îÄ BandCard.tsx
‚îÇ   ‚îú‚îÄ‚îÄ BandList.tsx
‚îÇ   ‚îî‚îÄ‚îÄ BandForm.tsx
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îú‚îÄ‚îÄ useBand.ts
‚îÇ   ‚îî‚îÄ‚îÄ useBandList.ts
‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îî‚îÄ‚îÄ band-utils.ts
‚îú‚îÄ‚îÄ constants/
‚îÇ   ‚îî‚îÄ‚îÄ band-types.ts
‚îî‚îÄ‚îÄ api.ts
```

**‚ùå WRONG: Don't organize by technical concerns**
```
src/
‚îú‚îÄ‚îÄ components/
‚îú‚îÄ‚îÄ hooks/
‚îú‚îÄ‚îÄ utils/
‚îî‚îÄ‚îÄ types/
```

---

## 3. Component Development Rules

### 3.1. Component Structure (MANDATORY)

```typescript
'use client';

import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { cn } from '@/lib/utils';

interface ComponentProps {
  title: string;
  className?: string;
  children?: React.ReactNode;
}

export function Component({ title, className, children }: ComponentProps) {
  const [state, setState] = useState(false);

  const handleClick = () => {
    setState(!state);
  };

  return (
    <Card className={cn('p-4', className)}>
      <h2 className="text-lg font-semibold">{title}</h2>
      <Button onClick={handleClick}>
        {state ? 'Active' : 'Inactive'}
      </Button>
      {children}
    </Card>
  );
}
```

### 3.2. Component Rules

**‚úÖ MUST DO:**
- Always use `'use client'` directive
- Always define TypeScript interfaces for props
- Always use proper semantic HTML elements
- Always implement proper accessibility attributes
- Always use Tailwind CSS for styling
- Always use shadcn/ui components when available

**‚ùå NEVER DO:**
- Don't use inline styles
- Don't use CSS modules or styled-components
- Don't create components without proper TypeScript types
- Don't ignore accessibility requirements
- Don't use deprecated React patterns

---

## 4. State Management Rules

### 4.1. State Management Hierarchy

1. **Server State:** TanStack React Query
2. **Global Client State:** Zustand
3. **Local Component State:** useState/useReducer
4. **Form State:** React Hook Form

### 4.2. State Management Examples

**Server State (React Query):**
```typescript
// ‚úÖ CORRECT
const { data: bands, isLoading, error } = useQuery({
  queryKey: ['bands'],
  queryFn: fetchBands,
  staleTime: 5 * 60 * 1000, // 5 minutes
});

// Mutations
const mutation = useMutation({
  mutationFn: createBand,
  onSuccess: () => {
    queryClient.invalidateQueries({ queryKey: ['bands'] });
  },
});
```

**Global Client State (Zustand):**
```typescript
// ‚úÖ CORRECT
interface AppState {
  selectedBand: Band | null;
  theme: 'light' | 'dark';
  setSelectedBand: (band: Band | null) => void;
  setTheme: (theme: 'light' | 'dark') => void;
}

const useAppStore = create<AppState>((set) => ({
  selectedBand: null,
  theme: 'light',
  setSelectedBand: (band) => set({ selectedBand: band }),
  setTheme: (theme) => set({ theme }),
}));
```

---

## 5. Form Handling Rules

### 5.1. Form Implementation (MANDATORY)

```typescript
'use client';

import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';

const formSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
});

type FormData = z.infer<typeof formSchema>;

export function BandForm() {
  const form = useForm<FormData>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      name: '',
      email: '',
    },
  });

  const onSubmit = async (data: FormData) => {
    try {
      await createBand(data);
      form.reset();
    } catch (error) {
      console.error('Failed to create band:', error);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Band Name</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit">Create Band</Button>
      </form>
    </Form>
  );
}
```

### 5.2. Form Rules

**‚úÖ MUST DO:**
- Always use React Hook Form with Zod validation
- Always implement proper error handling
- Always provide user feedback for form submissions
- Always use shadcn/ui form components
- Always implement proper loading states

**‚ùå NEVER DO:**
- Don't use uncontrolled forms
- Don't skip form validation
- Don't ignore form submission errors
- Don't use HTML5 validation only

---

## 6. API Integration Rules

### 6.1. API Function Structure

```typescript
// src/features/bands/api.ts
import { supabase } from '@/lib/supabase/client';
import { Band } from '@/types/band';

export async function fetchBands(): Promise<Band[]> {
  const { data, error } = await supabase
    .from('bands')
    .select('*')
    .order('created_at', { ascending: false });

  if (error) {
    throw new Error(`Failed to fetch bands: ${error.message}`);
  }

  return data || [];
}

export async function createBand(bandData: Omit<Band, 'id' | 'created_at'>): Promise<Band> {
  const { data, error } = await supabase
    .from('bands')
    .insert([bandData])
    .select()
    .single();

  if (error) {
    throw new Error(`Failed to create band: ${error.message}`);
  }

  return data;
}
```

### 6.2. API Rules

**‚úÖ MUST DO:**
- Always implement proper error handling
- Always use TypeScript for API responses
- Always validate data with Zod schemas
- Always use React Query for data fetching
- Always implement proper loading states

**‚ùå NEVER DO:**
- Don't ignore API errors
- Don't use 'any' types for API responses
- Don't skip data validation
- Don't implement manual caching

---

## 7. Styling Rules

### 7.1. Tailwind CSS Usage

```typescript
// ‚úÖ CORRECT: Use Tailwind classes
<div className="flex items-center justify-between p-4 bg-white rounded-lg shadow-md">
  <h2 className="text-lg font-semibold text-gray-900">Band Name</h2>
  <Button variant="outline" size="sm">View Details</Button>
</div>

// ‚ùå WRONG: Don't use inline styles
<div style={{ display: 'flex', alignItems: 'center', padding: '16px' }}>
  <h2 style={{ fontSize: '18px', fontWeight: 'bold' }}>Band Name</h2>
</div>
```

### 7.2. Styling Rules

**‚úÖ MUST DO:**
- Always use Tailwind CSS classes
- Always use shadcn/ui components when available
- Always implement responsive design
- Always use semantic color classes
- Always use proper spacing utilities

**‚ùå NEVER DO:**
- Don't use inline styles
- Don't use CSS modules
- Don't use styled-components
- Don't ignore mobile responsiveness

---

## 8. Error Handling Rules

### 8.1. Error Boundary Implementation

```typescript
'use client';

import { Component, ReactNode } from 'react';
import { Button } from '@/components/ui/button';

interface Props {
  children: ReactNode;
}

interface State {
  hasError: boolean;
}

export class ErrorBoundary extends Component<Props, State> {
  constructor(props: Props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(): State {
    return { hasError: true };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    console.error('Error caught by boundary:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="flex flex-col items-center justify-center min-h-[400px] p-4">
          <h2 className="text-xl font-semibold mb-4">Something went wrong</h2>
          <Button onClick={() => this.setState({ hasError: false })}>
            Try again
          </Button>
        </div>
      );
    }

    return this.props.children;
  }
}
```

### 8.2. Error Handling Rules

**‚úÖ MUST DO:**
- Always implement error boundaries for components
- Always handle API errors gracefully
- Always provide user-friendly error messages
- Always log errors for debugging
- Always implement retry mechanisms

**‚ùå NEVER DO:**
- Don't ignore errors
- Don't show technical error messages to users
- Don't let errors crash the application
- Don't skip error logging

---

## 9. Performance Rules

### 9.1. Performance Optimization

```typescript
// ‚úÖ CORRECT: Use React.memo for expensive components
const ExpensiveComponent = React.memo(({ data }: { data: Band[] }) => {
  return (
    <div>
      {data.map((band) => (
        <BandCard key={band.id} band={band} />
      ))}
    </div>
  );
});

// ‚úÖ CORRECT: Use useMemo for expensive calculations
const expensiveValue = useMemo(() => {
  return bands.filter(band => band.isActive).length;
}, [bands]);

// ‚úÖ CORRECT: Use useCallback for event handlers
const handleClick = useCallback((id: string) => {
  setSelectedBand(id);
}, []);
```

### 9.2. Performance Rules

**‚úÖ MUST DO:**
- Always use React.memo for expensive components
- Always use useMemo for expensive calculations
- Always use useCallback for event handlers
- Always implement proper loading states
- Always optimize images with Next.js Image component

**‚ùå NEVER DO:**
- Don't create unnecessary re-renders
- Don't ignore bundle size
- Don't skip code splitting
- Don't use unoptimized images

---

## 10. Testing Rules

### 10.1. Testing Requirements

**‚úÖ MUST IMPLEMENT:**
- Unit tests for utility functions
- Component tests for critical UI components
- Integration tests for feature workflows
- E2E tests for critical user journeys

**‚ùå NEVER SKIP:**
- Don't skip testing critical business logic
- Don't ignore accessibility testing
- Don't skip performance testing
- Don't ignore error scenario testing

---

## 11. Code Quality Rules

### 11.1. Code Standards

**‚úÖ MUST FOLLOW:**
- Use descriptive variable and function names
- Implement early returns for better readability
- Use functional programming patterns
- Write self-documenting code
- Use proper TypeScript types

**‚ùå NEVER DO:**
- Don't use magic numbers
- Don't write overly complex functions
- Don't ignore TypeScript errors
- Don't use deprecated patterns
- Don't skip code documentation

---

## 12. Package Management

### 12.1. Package Manager Rules

**‚úÖ MUST USE:**
- npm as the package manager
- Exact versions for critical dependencies
- Proper peer dependency management

**‚ùå NEVER DO:**
- Don't use yarn or pnpm
- Don't ignore dependency vulnerabilities
- Don't use outdated packages

---

## 13. Shadcn-ui Component Installation

### 13.1. Installation Process

When adding new shadcn-ui components, provide installation instructions:

```bash
# Example installations
$ npx shadcn@latest add card
$ npx shadcn@latest add textarea
$ npx shadcn@latest add dialog
$ npx shadcn@latest add form
$ npx shadcn@latest add input
```

### 13.2. Component Usage Rules

**‚úÖ MUST DO:**
- Always use shadcn-ui components when available
- Always follow shadcn-ui patterns
- Always customize components through CSS variables
- Always maintain accessibility features

**‚ùå NEVER DO:**
- Don't modify shadcn-ui component internals
- Don't ignore component variants
- Don't skip accessibility features

---

## 14. Supabase Integration Rules

### 14.1. Database Operations

**‚úÖ MUST DO:**
- Always create migrations for new tables
- Always implement Row Level Security (RLS)
- Always validate data with Zod schemas
- Always handle Supabase errors properly
- Always use proper TypeScript types for database operations

**‚ùå NEVER DO:**
- Don't run Supabase locally
- Don't ignore RLS policies
- Don't skip data validation
- Don't use raw SQL without proper typing

### 14.2. Migration Management

Store migration queries in `.sql` files in `/supabase/migrations/` directory:

```sql
-- Example migration
CREATE TABLE bands (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  name TEXT NOT NULL,
  description TEXT,
  profile_image TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable RLS
ALTER TABLE bands ENABLE ROW LEVEL SECURITY;

-- Create policies
CREATE POLICY "Users can view all bands" ON bands
  FOR SELECT USING (true);

CREATE POLICY "Users can insert their own bands" ON bands
  FOR INSERT WITH CHECK (auth.uid() = user_id);
```

---

## 15. Final Reminders

### 15.1. Development Workflow

1. **Plan:** Understand requirements and design solution
2. **Implement:** Follow all coding standards and patterns
3. **Test:** Ensure functionality and performance
4. **Review:** Check code quality and accessibility
5. **Deploy:** Follow deployment procedures

### 15.2. Quality Checklist

Before submitting any code, ensure:
- [ ] All TypeScript errors are resolved
- [ ] All components use 'use client' directive
- [ ] All forms use React Hook Form with Zod validation
- [ ] All API calls use React Query
- [ ] All styling uses Tailwind CSS
- [ ] All components are responsive
- [ ] All error handling is implemented
- [ ] All accessibility requirements are met

Remember: You are a senior full-stack developer building a production-ready application. Quality, maintainability, and user experience are your top priorities.

